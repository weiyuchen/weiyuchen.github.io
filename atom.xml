<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>CARRONGE</title>
  
  <subtitle>peace &amp; love</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-09-18T08:45:02.887Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>CARRONGE</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>服务器环境 kvm + docker + gogs + nextcloud 构建</title>
    <link href="http://yoursite.com/2019/08/16/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%BD%91%E7%BB%9C%E7%8E%AF%E5%A2%83%E8%AE%B0%E5%BD%95/"/>
    <id>http://yoursite.com/2019/08/16/服务器网络环境记录/</id>
    <published>2019-08-15T16:00:00.000Z</published>
    <updated>2019-09-18T08:45:02.887Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一句话概括&quot;&gt;&lt;a href=&quot;#一句话概括&quot; class=&quot;headerlink&quot; title=&quot;一句话概括&quot;&gt;&lt;/a&gt;一句话概括&lt;/h2&gt;&lt;p&gt;对前段时间花了一些功夫在一台服务器上搭建的一个实验和应用环境过程和遇到的问题做一个记录&lt;/p&gt;
&lt;p&gt;服务器配置如下&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;配置项&lt;/th&gt;
&lt;th&gt;模式&lt;/th&gt;
&lt;th&gt;大小&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;硬盘&lt;/td&gt;
&lt;td&gt;raid5&lt;/td&gt;
&lt;td&gt;11T&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;内存&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;64GB&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;这个服务器用来跑机器学习的实验可能不太合适，毕竟没有合适的显卡，因此我主要打算把它用来做一个其他实验的环境机器以及 git 服务器和本地网盘&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;实验环境基础为 —— kvm 和 docker&lt;/li&gt;
&lt;li&gt;git 服务器 —— gogs&lt;/li&gt;
&lt;li&gt;本地网盘 —— nextcloud 云盘&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="网络配置" scheme="http://yoursite.com/categories/%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE/"/>
    
    
      <category term="linux" scheme="http://yoursite.com/tags/linux/"/>
    
      <category term="docker" scheme="http://yoursite.com/tags/docker/"/>
    
      <category term="server" scheme="http://yoursite.com/tags/server/"/>
    
      <category term="kvm" scheme="http://yoursite.com/tags/kvm/"/>
    
      <category term="iptables" scheme="http://yoursite.com/tags/iptables/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu 18.04 netplan 网络配置</title>
    <link href="http://yoursite.com/2019/08/16/Linux%20%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE%E6%96%B9%E5%BC%8F%E5%8F%98%E6%9B%B4/"/>
    <id>http://yoursite.com/2019/08/16/Linux 网络配置方式变更/</id>
    <published>2019-08-15T16:00:00.000Z</published>
    <updated>2019-09-18T08:45:02.878Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一句话概括&quot;&gt;&lt;a href=&quot;#一句话概括&quot; class=&quot;headerlink&quot; title=&quot;一句话概括&quot;&gt;&lt;/a&gt;一句话概括&lt;/h2&gt;&lt;p&gt;主要讲解 Ubuntu 18.04 中 netplan 的网络配置具体方式，主要分为如下的几个方面&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;静态 IP 的配置&lt;/li&gt;
&lt;li&gt;动态 IP 的配置&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;动态-IP-的配置&quot;&gt;&lt;a href=&quot;#动态-IP-的配置&quot; class=&quot;headerlink&quot; title=&quot;动态 IP 的配置&quot;&gt;&lt;/a&gt;动态 IP 的配置&lt;/h3&gt;&lt;p&gt;Ubuntu 18.04 Server 安装好后，Netplan 的默认描述文件是：/etc/netplan/50-cloud-init.yaml&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ sudo vim /etc/netplan/50-cloud-init.yaml&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;network:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; version: 2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; renderer: networkd&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; ethernets: &lt;span class=&quot;comment&quot;&gt;# 对于以太网的配置&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   enp0s5: &lt;span class=&quot;comment&quot;&gt;# 这里是待配置网卡的名称&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     dhcp4: yes &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     dhcp6: yes&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ sudo netplan apply&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 使配置生效&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="网络配置" scheme="http://yoursite.com/categories/%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE/"/>
    
    
      <category term="linux" scheme="http://yoursite.com/tags/linux/"/>
    
      <category term="netplan" scheme="http://yoursite.com/tags/netplan/"/>
    
  </entry>
  
  <entry>
    <title>C语言输入及传参之谜 —— 数组篇</title>
    <link href="http://yoursite.com/2019/07/31/c%E8%AF%AD%E8%A8%80%E8%BE%93%E5%85%A5/"/>
    <id>http://yoursite.com/2019/07/31/c语言输入/</id>
    <published>2019-07-30T16:00:00.000Z</published>
    <updated>2019-09-18T08:45:02.883Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;最近有点忙碌，毕设和找工作同步进行，需要进行一些算法的训练，leetcode 上面风格是只用写函数体的内容，基本不用考虑输入时什么样的，但是基本上公司都是用牛客网作为笔试和面试的平台，牛客上的程序是完整的。。。从头到尾要全部写出来，这个时候，就会发现各种读取输入并存储的问题，然后是各种传参的问题（毕竟 leetcode 上都已经把这些参数接口啥的形式都给出来了，我们直接用就行），这是第二个大坑，代码逻辑都写完了，然后发现输入的数组啥的并没有传入子函数，抓狂！所以用一篇博文记录一下最近遇到的各种自己之前不熟悉的输入和传参问题&lt;/p&gt;
&lt;h2 id=&quot;输入相关&quot;&gt;&lt;a href=&quot;#输入相关&quot; class=&quot;headerlink&quot; title=&quot;输入相关&quot;&gt;&lt;/a&gt;输入相关&lt;/h2&gt;&lt;p&gt;由于一般的笔试题都有多行的输入，所以需要进行循环输入，并且有时候还没有初始条件来判断总共的行数，下面用一些典型的例子来说明&lt;/p&gt;
    
    </summary>
    
      <category term="算法学习" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="blog" scheme="http://yoursite.com/tags/blog/"/>
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="c 语言" scheme="http://yoursite.com/tags/c-%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>PCTF 的一道简单 docker 题小记</title>
    <link href="http://yoursite.com/2019/04/13/PCTF-docker/"/>
    <id>http://yoursite.com/2019/04/13/PCTF-docker/</id>
    <published>2019-04-12T16:00:00.000Z</published>
    <updated>2019-09-18T08:45:02.882Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一句话概括&quot;&gt;&lt;a href=&quot;#一句话概括&quot; class=&quot;headerlink&quot; title=&quot;一句话概括&quot;&gt;&lt;/a&gt;一句话概括&lt;/h2&gt;&lt;p&gt;老规矩，这篇文章的主要是通过一道简单的 CTF 题分析如何通过 docker image 得到 dockerfile&lt;/p&gt;
    
    </summary>
    
      <category term="docker" scheme="http://yoursite.com/categories/docker/"/>
    
    
      <category term="linux" scheme="http://yoursite.com/tags/linux/"/>
    
      <category term="docker" scheme="http://yoursite.com/tags/docker/"/>
    
      <category term="docker image" scheme="http://yoursite.com/tags/docker-image/"/>
    
      <category term="dockerfile" scheme="http://yoursite.com/tags/dockerfile/"/>
    
  </entry>
  
  <entry>
    <title>es数据库聚合操作——sql的group by</title>
    <link href="http://yoursite.com/2019/03/22/es%E6%95%B0%E6%8D%AE%E5%BA%93%E7%94%A8%E6%B3%95/"/>
    <id>http://yoursite.com/2019/03/22/es数据库用法/</id>
    <published>2019-03-21T16:00:00.000Z</published>
    <updated>2019-09-18T08:45:02.884Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;晚上有一个紧急任务，需要在es数据库上做一些数据统计的工作，之前搭建这个 es(Elastic Search，数据库) 的时候因为是直接集成进去的，没有弄明白 DSL 语法，这次借着这个机会，先对这个现在常用的数据库有一个大致的了解。&lt;/p&gt;
&lt;p&gt;本文会涉及 es 数据库中的 bucket聚合-桶聚合操作，主要是aggs，顺带介绍一些 DSL 的一些基本概念，时间有限，难免有些差池，大佬轻喷。&lt;/p&gt;
    
    </summary>
    
      <category term="现学小技能" scheme="http://yoursite.com/categories/%E7%8E%B0%E5%AD%A6%E5%B0%8F%E6%8A%80%E8%83%BD/"/>
    
    
      <category term="elasticsearch" scheme="http://yoursite.com/tags/elasticsearch/"/>
    
      <category term="database" scheme="http://yoursite.com/tags/database/"/>
    
      <category term="DSL语句" scheme="http://yoursite.com/tags/DSL%E8%AF%AD%E5%8F%A5/"/>
    
      <category term="聚合操作" scheme="http://yoursite.com/tags/%E8%81%9A%E5%90%88%E6%93%8D%E4%BD%9C/"/>
    
  </entry>
  
  <entry>
    <title>回车和换行-win&amp;linux&amp;mac——\r与\n的不同之处</title>
    <link href="http://yoursite.com/2019/03/21/%E5%9B%9E%E8%BD%A6%E5%92%8C%E6%8D%A2%E8%A1%8C-win&amp;linux&amp;mac/"/>
    <id>http://yoursite.com/2019/03/21/回车和换行-win&amp;linux&amp;mac/</id>
    <published>2019-03-20T16:00:00.000Z</published>
    <updated>2019-09-18T08:45:02.886Z</updated>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
      <category term="计算机知识" scheme="http://yoursite.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9F%A5%E8%AF%86/"/>
    
    
      <category term="linux" scheme="http://yoursite.com/tags/linux/"/>
    
      <category term="\r\n" scheme="http://yoursite.com/tags/r-n/"/>
    
      <category term="windows" scheme="http://yoursite.com/tags/windows/"/>
    
      <category term="mac" scheme="http://yoursite.com/tags/mac/"/>
    
  </entry>
  
  <entry>
    <title>Docker学习资源汇总</title>
    <link href="http://yoursite.com/2019/03/19/docker%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%BA%90/"/>
    <id>http://yoursite.com/2019/03/19/docker学习资源/</id>
    <published>2019-03-18T16:00:00.000Z</published>
    <updated>2019-09-18T08:45:02.884Z</updated>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
      <category term="docker 学习" scheme="http://yoursite.com/categories/docker-%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="docker" scheme="http://yoursite.com/tags/docker/"/>
    
      <category term="image" scheme="http://yoursite.com/tags/image/"/>
    
      <category term="container" scheme="http://yoursite.com/tags/container/"/>
    
      <category term="源码" scheme="http://yoursite.com/tags/%E6%BA%90%E7%A0%81/"/>
    
      <category term="学习资源" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%BA%90/"/>
    
  </entry>
  
  <entry>
    <title>c语言指针赋值</title>
    <link href="http://yoursite.com/2019/03/18/c%E8%AF%AD%E8%A8%80%E6%8C%87%E9%92%88%E8%B5%8B%E5%80%BC%E7%9B%B8%E5%85%B3/"/>
    <id>http://yoursite.com/2019/03/18/c语言指针赋值相关/</id>
    <published>2019-03-17T16:00:00.000Z</published>
    <updated>2019-09-18T08:45:02.883Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;最近焦虑着找工作的事情，所以也来刷一刷 leetcode 上面的题目，想了想还是用比较基础的C语言，先做简单的题，不做不知道，一做就发现了一些C语言知识上的盲点，指针这里是让所有C语言学习者又爱又恨的地方了。&lt;/p&gt;
&lt;p&gt;题目非常简单，就是用指针定义一个数组，然后给数组进行加一的操作，最后返回加一之后的数组即可，由于长时间也没有使用C编程，所以开始跑的时候就出了一些问题，leetcode 的在线编译器又无法调试，因此就在自己的本地跑，新的问题就出现了，那就是需要写 main 函数，当然这个就是引发问题的地方，因为最后子函数都在 leetcode 上运行成功了，但是在本地跑的时候还是结果不对，这里就给刚才遇到的坑一个总结。&lt;/p&gt;
    
    </summary>
    
      <category term="leetcode" scheme="http://yoursite.com/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="c语言" scheme="http://yoursite.com/tags/c%E8%AF%AD%E8%A8%80/"/>
    
      <category term="指针" scheme="http://yoursite.com/tags/%E6%8C%87%E9%92%88/"/>
    
  </entry>
  
  <entry>
    <title>postfix 设置（1）—— relay 设置</title>
    <link href="http://yoursite.com/2019/03/18/postfix%E8%AE%BE%E7%BD%AE%E2%80%94%E2%80%94%E4%B8%AD%E7%BB%A7%E8%AE%BE%E7%BD%AE/"/>
    <id>http://yoursite.com/2019/03/18/postfix设置——中继设置/</id>
    <published>2019-03-17T16:00:00.000Z</published>
    <updated>2019-09-18T08:45:02.885Z</updated>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
      <category term="postfix 学习" scheme="http://yoursite.com/categories/postfix-%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="postfix" scheme="http://yoursite.com/tags/postfix/"/>
    
      <category term="relay" scheme="http://yoursite.com/tags/relay/"/>
    
      <category term="mail" scheme="http://yoursite.com/tags/mail/"/>
    
  </entry>
  
  <entry>
    <title>最完美的Hexo多电脑同步方法(转)</title>
    <link href="http://yoursite.com/2019/03/16/%E6%9C%80%E5%AE%8C%E7%BE%8E%E7%9A%84Hexo%E5%A4%9A%E7%94%B5%E8%84%91%E5%90%8C%E6%AD%A5%E6%96%B9%E6%B3%95(%E8%BD%AC)/"/>
    <id>http://yoursite.com/2019/03/16/最完美的Hexo多电脑同步方法(转)/</id>
    <published>2019-03-15T16:00:00.000Z</published>
    <updated>2019-09-18T08:45:02.886Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;经常我们有一个场景：需要在公司或者家庭多个电脑完成Hexo的博客撰写和发布工作。这就涉及到Hexo多电脑的同步问题。&lt;/p&gt;
&lt;p&gt;网上的方案基本上都是多分支方案。也即，在同一个仓库创建两个分支：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hexo分支 – 用来保存所有Hexo的源文件&lt;/li&gt;
&lt;li&gt;master分支 – 用来保存Hexo生成的博客文件&lt;br&gt;在创建GitHub Pages或者Coding Pages时，以master分支为pages分支。&lt;br&gt;Hexo的deploy指向master分支部署pages，git的管理指向Hexo分支。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;但是这里有一个巨大的问题，就是多分支的方案一定是让完整的Hexo源文件暴露在公开的仓库了。这对一些Hexo博客采用的leancloud阅读次数管理、多说评论等服务的私有secret key也暴露在公开仓库分支了。如果对这些配置的_config.yml进行单独管理的话，又不能在另一台电脑直接git pull同步，非常的麻烦。&lt;/p&gt;
&lt;p&gt;所以Hexo最完美的多电脑同步方法是，创建两个仓库：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hexo私有仓库 – 用来保存所有Hexo的源文件&lt;/li&gt;
&lt;li&gt;master公开仓库 – 用来保存Hexo生成的博客文件&lt;br&gt;下面来具体讲讲实现方法。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="博客搭建" scheme="http://yoursite.com/categories/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
    
      <category term="blog - hexo - coding云" scheme="http://yoursite.com/tags/blog-hexo-coding%E4%BA%91/"/>
    
  </entry>
  
  <entry>
    <title>docker命令学习记录</title>
    <link href="http://yoursite.com/2019/03/13/docker%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    <id>http://yoursite.com/2019/03/13/docker命令学习记录/</id>
    <published>2019-03-12T16:00:00.000Z</published>
    <updated>2019-09-18T08:45:02.884Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;本文主要记录自己在学习使用docker过程中的一些指令操作，大多是解决某些比较常见的问题，但是又一时无法联想起来的命令操作。&lt;/p&gt;
    
    </summary>
    
      <category term="docker" scheme="http://yoursite.com/categories/docker/"/>
    
    
      <category term="docker" scheme="http://yoursite.com/tags/docker/"/>
    
      <category term="learning" scheme="http://yoursite.com/tags/learning/"/>
    
  </entry>
  
  <entry>
    <title>流量分析学习</title>
    <link href="http://yoursite.com/2019/03/11/%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/2019/03/11/流量分析学习/</id>
    <published>2019-03-10T16:00:00.000Z</published>
    <updated>2019-09-18T08:45:02.887Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;本记录旨在记录自己入门流量分析的整个过程，从抓包开始，主要的工作环境为Linux，偶尔会用到Windows上的wireshark进行流量包的查看（不用Linux查看pcap包的原因——大多使用的是无界面的server版Linux），因此抓包的工具为tcpdump，暂用python进行流量内容的解析。&lt;/p&gt;
    
    </summary>
    
      <category term="流量分析" scheme="http://yoursite.com/categories/%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/"/>
    
    
      <category term="linux" scheme="http://yoursite.com/tags/linux/"/>
    
      <category term="流量" scheme="http://yoursite.com/tags/%E6%B5%81%E9%87%8F/"/>
    
  </entry>
  
  <entry>
    <title>mailoney源码分析</title>
    <link href="http://yoursite.com/2019/03/06/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    <id>http://yoursite.com/2019/03/06/源码分析/</id>
    <published>2019-03-05T16:00:00.000Z</published>
    <updated>2019-09-18T08:45:02.887Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;本文旨在分析mailoney如何实现对于邮件系统的模拟，以及对于邮件和邮箱系统交互命令的记录；&lt;br&gt;mailoney开源项目中，一共有三种不同的工作模式，分别为：1 作为开放中继；2 只记录认证信息；3 记录所有的内容（包括认证信息和邮件内容）；&lt;/p&gt;
    
    </summary>
    
      <category term="蜜罐学习" scheme="http://yoursite.com/categories/%E8%9C%9C%E7%BD%90%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="linux" scheme="http://yoursite.com/tags/linux/"/>
    
      <category term="蜜罐" scheme="http://yoursite.com/tags/%E8%9C%9C%E7%BD%90/"/>
    
      <category term="honeypot" scheme="http://yoursite.com/tags/honeypot/"/>
    
      <category term="mailoney" scheme="http://yoursite.com/tags/mailoney/"/>
    
  </entry>
  
  <entry>
    <title>shell编程学习-持续更新</title>
    <link href="http://yoursite.com/2019/03/06/shell%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0-%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0/"/>
    <id>http://yoursite.com/2019/03/06/shell编程学习-持续更新/</id>
    <published>2019-03-05T16:00:00.000Z</published>
    <updated>2019-09-18T08:45:02.885Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;现在很多的项目源码中都含有shell脚本，但是我对于shell脚本的写法还不是很熟悉。这种脚本式的语言大多是用于==自动化处理==的目的，包括一些正则匹配规则等等，主要是进行一些安装处理以及配置操作。鉴于shell脚本的使用量很大，因此我在这篇文档里把一些我见到的常用的shell脚本中的写法做一个解析，便于以后见到类似的语句等不会无法理解。&lt;/p&gt;
    
    </summary>
    
      <category term="linux学习" scheme="http://yoursite.com/categories/linux%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="linux" scheme="http://yoursite.com/tags/linux/"/>
    
      <category term="debug" scheme="http://yoursite.com/tags/debug/"/>
    
      <category term="shell" scheme="http://yoursite.com/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>Linux的init系统</title>
    <link href="http://yoursite.com/2019/03/06/Linux%E7%9A%84init%E7%B3%BB%E7%BB%9F/"/>
    <id>http://yoursite.com/2019/03/06/Linux的init系统/</id>
    <published>2019-03-05T16:00:00.000Z</published>
    <updated>2019-09-18T08:45:02.879Z</updated>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
      <category term="linux" scheme="http://yoursite.com/categories/linux/"/>
    
    
      <category term="linux" scheme="http://yoursite.com/tags/linux/"/>
    
      <category term="init 系统" scheme="http://yoursite.com/tags/init-%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>word 日常小技巧</title>
    <link href="http://yoursite.com/2019/03/01/word%E7%9B%B8%E5%85%B3%E5%86%85%E5%AE%B9/"/>
    <id>http://yoursite.com/2019/03/01/word相关内容/</id>
    <published>2019-02-28T16:00:00.000Z</published>
    <updated>2019-09-18T08:45:02.885Z</updated>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文旨在收集一些常用的word小技巧&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="office" scheme="http://yoursite.com/categories/office/"/>
    
    
      <category term="office" scheme="http://yoursite.com/tags/office/"/>
    
      <category term="word" scheme="http://yoursite.com/tags/word/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu常规错误Could not get lock /var/lib/dpkg/lock...</title>
    <link href="http://yoursite.com/2019/03/01/Ubuntu%E5%87%BA%E7%8E%B0dpkg%E8%A2%AB%E5%8D%A0%E7%94%A8/"/>
    <id>http://yoursite.com/2019/03/01/Ubuntu出现dpkg被占用/</id>
    <published>2019-02-28T16:00:00.000Z</published>
    <updated>2019-09-18T08:45:02.883Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;想必用Ubuntu的小伙伴都被一个错误折磨过，它总是来无影，但是一般就赖着不走了，真容如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;E: Could not get lock /var/lib/dpkg/lock - open (11: Resource temporarily unavailable)
E: Unable to lock the administration directory (/var/lib/dpkg/), is another process using it?
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;记得刚接触Ubuntu的时候，对这个问题束手无策，每次碰到只能重启解决。。。还是当时太年轻。那么，这篇文章分两个部分给这个问题进行解决，一部分是这个问题的产生原因，第二部分是这个问题的解决方案。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="linux" scheme="http://yoursite.com/categories/linux/"/>
    
    
      <category term="linux" scheme="http://yoursite.com/tags/linux/"/>
    
      <category term="ubuntu" scheme="http://yoursite.com/tags/ubuntu/"/>
    
      <category term="ubuntu bug" scheme="http://yoursite.com/tags/ubuntu-bug/"/>
    
  </entry>
  
  <entry>
    <title>Linux指令的标准输入，输出及错误——2&gt;&amp;1</title>
    <link href="http://yoursite.com/2019/02/28/Linux%E6%8C%87%E4%BB%A4%E6%A0%87%E5%87%86%E8%BE%93%E5%85%A5%E3%80%81%E8%BE%93%E5%87%BA%E5%8F%8A%E9%94%99%E8%AF%AF/"/>
    <id>http://yoursite.com/2019/02/28/Linux指令标准输入、输出及错误/</id>
    <published>2019-02-27T16:00:00.000Z</published>
    <updated>2019-09-18T08:45:02.879Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;今天在看chroot的时候，发现一个2&amp;gt;&amp;amp;1的东西，觉得跟指令完全不相关，有点像是正则表达式的样子，之前也稍微听过别人说是跟标准输入输出有关系，但是没有搞清楚过具体的作用，这里就把这个相关的知识点写一写吧&lt;/p&gt;
&lt;h2 id=&quot;一句话概括&quot;&gt;&lt;a href=&quot;#一句话概括&quot; class=&quot;headerlink&quot; title=&quot;一句话概括&quot;&gt;&lt;/a&gt;一句话概括&lt;/h2&gt;&lt;p&gt;为了给赶时间的童鞋看，我就用一句话简要概括：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;2&amp;gt;&amp;amp;1的作用是将程序运行时的标准错误信息添加到标准输出中&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="linux学习" scheme="http://yoursite.com/categories/linux%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="linux" scheme="http://yoursite.com/tags/linux/"/>
    
      <category term="debug" scheme="http://yoursite.com/tags/debug/"/>
    
  </entry>
  
  <entry>
    <title>Linux下的screen指令使用(相当于多任务窗口)</title>
    <link href="http://yoursite.com/2018/11/13/Linux%E4%B8%8B%E7%9A%84screen%E6%8C%87%E4%BB%A4%E4%BD%BF%E7%94%A8(%E7%9B%B8%E5%BD%93%E4%BA%8E%E5%A4%9A%E4%BB%BB%E5%8A%A1%E7%AA%97%E5%8F%A3)/"/>
    <id>http://yoursite.com/2018/11/13/Linux下的screen指令使用(相当于多任务窗口)/</id>
    <published>2018-11-12T16:00:00.000Z</published>
    <updated>2019-09-18T08:45:02.878Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;很多初次接触Linux服务器的小白可能跟我有一样的困惑，不像是通常使用的界面化的Windows和Linux一样，我们没有办法打开很多终端去进行各种不同的操作，这里指通过远程连接去接到服务器上，因为有人肯定会说tty终端，当通过ssh连接到服务器上时，我们是没有办法通过Alt+F1的方式进行终端切换的，所以难道我们就没有办法，只能在一个终端上跑任务的时候在一旁嗑瓜子儿干等着吗？&lt;/p&gt;
    
    </summary>
    
      <category term="linux学习" scheme="http://yoursite.com/categories/linux%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="linux" scheme="http://yoursite.com/tags/linux/"/>
    
      <category term="tools" scheme="http://yoursite.com/tags/tools/"/>
    
  </entry>
  
  <entry>
    <title>SisdigFalco 功能测试</title>
    <link href="http://yoursite.com/2018/10/16/SisdigFalcoTest/"/>
    <id>http://yoursite.com/2018/10/16/SisdigFalcoTest/</id>
    <published>2018-10-15T16:00:00.000Z</published>
    <updated>2019-09-18T08:45:02.882Z</updated>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;测试环境：&lt;br&gt;系统：安装于xen4.11上的Ubuntu16.04 LTS&lt;br&gt;docker版本：18.06.1-ce&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="docker" scheme="http://yoursite.com/categories/docker/"/>
    
    
      <category term="linux" scheme="http://yoursite.com/tags/linux/"/>
    
      <category term="docker" scheme="http://yoursite.com/tags/docker/"/>
    
      <category term="sisdig" scheme="http://yoursite.com/tags/sisdig/"/>
    
      <category term="falco" scheme="http://yoursite.com/tags/falco/"/>
    
  </entry>
  
</feed>
